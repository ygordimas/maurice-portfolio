/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import {
  MeshTransmissionMaterial,
  useEnvironment,
  useGLTF,
} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useControls } from "leva";

export function Head(props) {
  const { nodes, materials } = useGLTF("/Head_2.glb");
  const { scalingFactor } = { ...props };
  const { viewport } = useThree();
  const responsiveRatio = viewport.width / 4.7;
  const isMobile = window.innerWidth < 768;

  const transmissionProps = {
    thickness: 0.1,
    roughness: 0.1,
    transmission: 0.8,
    ior: 0.7,
    chromaticAberration: 0.14,
    backside: true,
  };

  const ref = useRef();

  useFrame(({ clock }) => {
    ref.current.rotation.x = isMobile ? 0 : clock.getElapsedTime() * 0.75;
    ref.current.rotation.y = isMobile ? clock.getElapsedTime() * 0.75 : 0;
    // ref.current.rotation.z = clock.getElapsedTime() * 0.3;
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ref}
        geometry={nodes.BÃ©zierCurve.geometry}
        rotation={[0, 0, isMobile ? 0 : Math.PI / 2]}
        scale={[
          scalingFactor * responsiveRatio,
          scalingFactor * responsiveRatio,
          scalingFactor * responsiveRatio,
        ]}
      >
        <MeshTransmissionMaterial {...transmissionProps} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/Head.glb");

export default Head;
